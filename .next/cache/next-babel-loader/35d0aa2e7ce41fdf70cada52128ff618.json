{"ast":null,"code":"var _jsxFileName = \"/Users/coding/next-ts/components/calculator/Calculator.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from './Calculator.module.css';\nexport default class Calculator extends React.PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      0: count,\n      1: setCount\n    } = useState();\n\n    function handleChange(value) {\n      if (isNaN(Number(value))) {\n        alert(\"field can only be a number\");\n        if (count === undefined) setCount('');else setCount(count);\n        return;\n      }\n\n      setCount(value);\n      this.props.streaming.count = Number(value);\n      this.props.calculateTotal();\n    }\n\n    return __jsx(\"div\", {\n      className: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, this.props.streaming.name, __jsx(\"div\", {\n      className: styles.arrowAndStreams,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: styles.arrow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: styles.underline,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      placeholder: \"N. of streams\",\n      className: styles.input,\n      value: count,\n      onChange: event => handleChange(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/coding/next-ts/components/calculator/Calculator.tsx"],"names":["React","useState","styles","Calculator","PureComponent","constructor","props","render","count","setCount","handleChange","value","isNaN","Number","alert","undefined","streaming","calculateTotal","container","name","arrowAndStreams","arrow","underline","input","event","target"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAaA,eAAe,MAAMC,UAAN,SAAuCH,KAAK,CAACI,aAA7C,CAA0D;AAErEC,EAAAA,WAAW,CAACC,KAAD,EAAc;AACrB,UAAMA,KAAN;AACH;;AAGMC,EAAAA,MAAP,GAAoC;AAEhC,UAAM;AAAA,SAACC,KAAD;AAAA,SAAQC;AAAR,QAAoBR,QAAQ,EAAlC;;AAEA,aAASS,YAAT,CAAsBC,KAAtB,EAA2C;AACvC,UAAGC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAR,EAAyB;AACrBG,QAAAA,KAAK,CAAC,4BAAD,CAAL;AACA,YAAGN,KAAK,KAAKO,SAAb,EACIN,QAAQ,CAAC,EAAD,CAAR,CADJ,KAGIA,QAAQ,CAACD,KAAD,CAAR;AACJ;AACH;;AACDC,MAAAA,QAAQ,CAACE,KAAD,CAAR;AACA,WAAKL,KAAL,CAAWU,SAAX,CAAqBR,KAArB,GAA6BK,MAAM,CAACF,KAAD,CAAnC;AACA,WAAKL,KAAL,CAAWW,cAAX;AACH;;AAID,WACI;AAAK,MAAA,SAAS,EAAEf,MAAM,CAACgB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKZ,KAAL,CAAWU,SAAX,CAAqBG,IAD1B,EAEI;AAAK,MAAA,SAAS,EAAEjB,MAAM,CAACkB,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAElB,MAAM,CAACmB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAEnB,MAAM,CAACoB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,WAAW,EAAC,eAAnB;AAAmC,MAAA,SAAS,EAAEpB,MAAM,CAACqB,KAArD;AAA4D,MAAA,KAAK,EAAEf,KAAnE;AAA0E,MAAA,QAAQ,EAAGgB,KAAD,IAAWd,YAAY,CAACc,KAAK,CAACC,MAAN,CAAad,KAAd,CAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CAFJ,CADJ;AAWH;;AAtCoE","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from './Calculator.module.css'\n\ninterface Props {\n    streaming: {\n        name: string;\n        rate: number;\n        count: number;\n    };\n    calculateTotal: () => void\n    total: number;\n}\n\n\nexport default class Calculator<Props, State> extends React.PureComponent{\n\n    constructor(props: Props){\n        super(props);\n    }\n\n\n    public render(): React.ReactElement {\n\n        const [count, setCount] = useState();\n\n        function handleChange(value: string): void {\n            if(isNaN(Number(value))) {\n                alert(\"field can only be a number\");\n                if(count === undefined)\n                    setCount('');\n                else\n                    setCount(count);\n                return;\n            }\n            setCount(value);\n            this.props.streaming.count = Number(value);\n            this.props.calculateTotal();\n        }\n\n\n\n        return(\n            <div className={styles.container}>\n                {this.props.streaming.name}\n                <div className={styles.arrowAndStreams}>\n                    <div className={styles.arrow}/>\n                    <div className={styles.underline}>\n                        <input placeholder=\"N. of streams\" className={styles.input} value={count} onChange={(event) => handleChange(event.target.value)}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}