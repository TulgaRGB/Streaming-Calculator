{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/coding/next-ts/components/calculator/Calculator.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from './Calculator.module.css';\n\nvar Calculator =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Calculator, _React$PureComponent);\n\n  function Calculator() {\n    _classCallCheck(this, Calculator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Calculator).apply(this, arguments));\n  }\n\n  _createClass(Calculator, [{\n    key: \"render\",\n    value: function render() {\n      var _useState = useState(),\n          count = _useState[0],\n          setCount = _useState[1];\n\n      function handleChange(value) {\n        if (isNaN(Number(value))) {\n          alert(\"field can only be a number\");\n          if (count === undefined) setCount('');else setCount(count);\n          return;\n        }\n\n        setCount(value);\n        this.props.streaming.count = Number(value);\n        this.props.calculateTotal();\n      }\n\n      return __jsx(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.streaming.name, __jsx(\"div\", {\n        className: styles.arrowAndStreams,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: styles.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: styles.underline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        placeholder: \"N. of streams\",\n        className: styles.input,\n        value: count,\n        onChange: function onChange(event) {\n          return handleChange(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Calculator;\n}(React.PureComponent);\n\nexport { Calculator as default };","map":{"version":3,"sources":["/Users/coding/next-ts/components/calculator/Calculator.tsx"],"names":["React","useState","styles","Calculator","count","setCount","handleChange","value","isNaN","Number","alert","undefined","props","streaming","calculateTotal","container","name","arrowAndStreams","arrow","underline","input","event","target","PureComponent"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;IAaqBC,U;;;;;;;;;;;;;6BAEmB;AAAA,sBAENF,QAAQ,EAFF;AAAA,UAEzBG,KAFyB;AAAA,UAElBC,QAFkB;;AAIhC,eAASC,YAAT,CAAsBC,KAAtB,EAA2C;AACvC,YAAGC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAR,EAAyB;AACrBG,UAAAA,KAAK,CAAC,4BAAD,CAAL;AACA,cAAGN,KAAK,KAAKO,SAAb,EACIN,QAAQ,CAAC,EAAD,CAAR,CADJ,KAGIA,QAAQ,CAACD,KAAD,CAAR;AACJ;AACH;;AACDC,QAAAA,QAAQ,CAACE,KAAD,CAAR;AACA,aAAKK,KAAL,CAAWC,SAAX,CAAqBT,KAArB,GAA6BK,MAAM,CAACF,KAAD,CAAnC;AACA,aAAKK,KAAL,CAAWE,cAAX;AACH;;AAID,aACI;AAAK,QAAA,SAAS,EAAEZ,MAAM,CAACa,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKH,KAAL,CAAWC,SAAX,CAAqBG,IAD1B,EAEI;AAAK,QAAA,SAAS,EAAEd,MAAM,CAACe,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAEf,MAAM,CAACgB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAEhB,MAAM,CAACiB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,WAAW,EAAC,eAAnB;AAAmC,QAAA,SAAS,EAAEjB,MAAM,CAACkB,KAArD;AAA4D,QAAA,KAAK,EAAEhB,KAAnE;AAA0E,QAAA,QAAQ,EAAE,kBAACiB,KAAD;AAAA,iBAAWf,YAAY,CAACe,KAAK,CAACC,MAAN,CAAaf,KAAd,CAAvB;AAAA,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,CAFJ,CADJ;AAWH;;;;EAjCiDP,KAAK,CAACuB,a;;SAAvCpB,U","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from './Calculator.module.css'\n\ninterface Props {\n    streaming: {\n        name: string;\n        rate: number;\n        count: number;\n    };\n    calculateTotal: () => void\n    total: number;\n}\n\n\nexport default class Calculator<Props, State> extends React.PureComponent{\n\n    public render(): React.ReactElement {\n\n        const [count, setCount] = useState();\n\n        function handleChange(value: string): void {\n            if(isNaN(Number(value))) {\n                alert(\"field can only be a number\");\n                if(count === undefined)\n                    setCount('');\n                else\n                    setCount(count);\n                return;\n            }\n            setCount(value);\n            this.props.streaming.count = Number(value);\n            this.props.calculateTotal();\n        }\n\n\n\n        return(\n            <div className={styles.container}>\n                {this.props.streaming.name}\n                <div className={styles.arrowAndStreams}>\n                    <div className={styles.arrow}/>\n                    <div className={styles.underline}>\n                        <input placeholder=\"N. of streams\" className={styles.input} value={count} onChange={(event) => handleChange(event.target.value)}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}