{"ast":null,"code":"var _jsxFileName = \"/Users/filippopiggici/WebstormProjects/streamingcalculator/Streamig-Calculator/components/streamingService/StreamingService.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from './StreamingService.module.css'; // import classNames from 'classnames';\n\nexport function StreamingService(props) {\n  const {\n    0: count,\n    1: setCount\n  } = useState();\n\n  function handleChange(value) {\n    if (isNaN(Number(value))) {\n      alert(\"field can only be a number\");\n      if (count === undefined) setCount('');else setCount(count);\n      return;\n    }\n\n    setCount(value);\n    props.streaming.count = Number(value);\n    props.calculateTotal();\n  }\n\n  return __jsx(\"div\", {\n    className: count === undefined || count === '' ? styles.container : styles.altContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.streaming.name, __jsx(\"div\", {\n    className: styles.arrowAndStreams,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: count === undefined || count === '' ? styles.arrow : styles.invisibleArrow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: styles.underline,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    placeholder: \"N. of streams\",\n    className: styles.input,\n    value: count,\n    onChange: event => handleChange(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/filippopiggici/WebstormProjects/streamingcalculator/Streamig-Calculator/components/streamingService/StreamingService.tsx"],"names":["React","useState","styles","StreamingService","props","count","setCount","handleChange","value","isNaN","Number","alert","undefined","streaming","calculateTotal","container","altContainer","name","arrowAndStreams","arrow","invisibleArrow","underline","input","event","target"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,+BAAnB,C,CACA;;AAWA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAA2D;AAC9D,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,EAAlC;;AAEA,WAASM,YAAT,CAAsBC,KAAtB,EAA2C;AACvC,QAAGC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAR,EAAyB;AACrBG,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACA,UAAGN,KAAK,KAAKO,SAAb,EACIN,QAAQ,CAAC,EAAD,CAAR,CADJ,KAGIA,QAAQ,CAACD,KAAD,CAAR;AACJ;AACH;;AACDC,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACAJ,IAAAA,KAAK,CAACS,SAAN,CAAgBR,KAAhB,GAAwBK,MAAM,CAACF,KAAD,CAA9B;AACAJ,IAAAA,KAAK,CAACU,cAAN;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAET,KAAK,KAAKO,SAAV,IAAuBP,KAAK,KAAK,EAAjC,GAAsCH,MAAM,CAACa,SAA7C,GAAyDb,MAAM,CAACc,YAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,KAAK,CAACS,SAAN,CAAgBI,IADrB,EAEI;AAAK,IAAA,SAAS,EAAEf,MAAM,CAACgB,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEb,KAAK,KAAKO,SAAV,IAAuBP,KAAK,KAAK,EAAjC,GAAsCH,MAAM,CAACiB,KAA7C,GAAqDjB,MAAM,CAACkB,cAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAElB,MAAM,CAACmB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,WAAW,EAAC,eAAnB;AAAmC,IAAA,SAAS,EAAEnB,MAAM,CAACoB,KAArD;AAA4D,IAAA,KAAK,EAAEjB,KAAnE;AAA0E,IAAA,QAAQ,EAAGkB,KAAD,IAAWhB,YAAY,CAACgB,KAAK,CAACC,MAAN,CAAahB,KAAd,CAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CAFJ,CADJ;AAWH","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from './StreamingService.module.css';\n// import classNames from 'classnames';\n\ninterface Props {\n    streaming: {\n        name: string;\n        rate: number;\n        count: number;\n    };\n    calculateTotal: () => void\n}\n\nexport function StreamingService(props: Props): React.ReactElement{\n    const [count, setCount] = useState();\n\n    function handleChange(value: string): void {\n        if(isNaN(Number(value))) {\n            alert(\"field can only be a number\");\n            if(count === undefined)\n                setCount('');\n            else\n                setCount(count);\n            return;\n        }\n        setCount(value);\n        props.streaming.count = Number(value);\n        props.calculateTotal();\n    }\n\n    return(\n        <div className={count === undefined || count === '' ? styles.container : styles.altContainer}>\n            {props.streaming.name}\n            <div className={styles.arrowAndStreams}>\n                <div className={count === undefined || count === '' ? styles.arrow : styles.invisibleArrow}/>\n                <div className={styles.underline}>\n                    <input placeholder=\"N. of streams\" className={styles.input} value={count} onChange={(event) => handleChange(event.target.value)}/>\n                </div>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}